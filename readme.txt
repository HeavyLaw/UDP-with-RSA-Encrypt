---------- Development Environment ----------
jdk version : jdk-1.8.0.312.7
editor: IntelliJ IDEA 2021.2.3 (Ultimate Edition)

---------- Project Files Structure ----------
src
└─com
    └─heavylaw
        ├─Alice
        │      Host.java
        │      key.pem
        │      password.txt
        │
        ├─Bob
        │      Client.java
        │      key.pem
        │
        └─utils
                IOUtils.java
                RSAUtils.java

The utils folder contains the tools required for this project, among which IOUtils.java provides the function of reading and writing files, and RSAUtils.java provides public and private key generation, RSA encryption, RSA decryption, SHA1 function, 128-bit string NA generation, etc. Security-Related Functions.

The Alice folder contains 3 files, of which the Host.java file is used to execute the Host and communicate with the Client. 
key.pem: This file includes the generated public and private keys (pk, sk).  It is generated by executing RSAUtils.java. 
password.txt: This file includes the username 'Bob' and the hash value of password H(PW). It is also generated by executing RSAUtils.java. 

The Bob folder contains 2 files, of which the the Client.java file is used to execute the Client and communicate with the Host.
key.pem: This file includes the hash value of public key H(pk). It is generated by excuting RSAUtils.java.

So, the initial project file result might look like below, it is recommended that you first execute file RSAUtils.java.
src
└─com
    └─heavylaw
        ├─Alice
        │      Host.java
        │
        ├─Bob
        │      Client.java
        │
        └─utils
                IOUtils.java
                RSAUtils.java

---------- Run Processing ----------
Before doing this, make sure you have executed file RSAUtils.java and have the same file structure as mine.

1. First run file Host.java in path /src/com/heavylaw/Alice. 
After successfully executing this file, the host will start listening on local host:8888, and it will display in Run window of Host :
> The server starts listening at port:8888
> Successfully created server at port:8888 

2. Then run file Client.java in path /src/com/heavylaw/Bob.
After successfully executing this file, the client will connect to the host, and it will display in Run window of Client :
> Successfully connect host!
In the same time, you will see this in Run window of Host (the client port might be different) :
> Create connection：/127.0.0.1:65283 

3. Then you will be asked to enter the username, which is sent to the host :
> Enter the username: 
>

If you enter a username other than 'Bob', it will display :
> User illegal.
and the client will be closed.

If you enter 'Bob', it will display :
> User successfully authenticated, the public key and NA are obtained.
In this Step, the client executes the userVerify function and sends the username entered to the Host for verification. The Host matches the receive information with the username 'Bob' in password.txt. If they are consistent, the RSAUtils.getRandomString function is called to generate NA, and It is sent to the Client together with the public key saved in key.pem. It will display in Run window of Host :
> User successfully authenticated.
> Generate NA.
> Send public key and NA.

4. Then the Client will verify the public key consistency, call RSAUtils.SHA1 to hash the public key obtained from the Host and match the value in /Bob/key.pem, if they are consistent, go to the next step, otherwise reject the communication and close. It will display in Run window of Client :
> Verify public key consistency.
> Public key is consistent, generate one-time password.

5. Then you will asked to enter the password for one-time password generation, the default password is '12345abc'.
> Enter the password: 
> 

Regardless of the password you enter, the client will do the following: generate a one-time password, call RSAUtils.encrypt to RSA encrypt the OTP with public key. But in the end you will get different results when it is verified in the Host side. In this step, it will display in Run window of Client (Each time you will get a different RSA encryption result) :
> RSA encryption of one-time password with public key.
> Send RSA encryption result: Ujbpi0rHaRbJaA89OCHIVGivfr880FmQZ+datsQzKFQFcVOuCuDptiozlPzeA0/kVCULh9KEJy52rrr3j4l0PGcCaYh3WdCVQiPO1dOzDVvWgLCflas10WAzCE+qB+8dbrrJDZUszL4vtC9vPWioCdBl096JgXwokX/T6rT8TOY=

And it will display in Run window of Host :
> Obtain RSA encryption result: Ujbpi0rHaRbJaA89OCHIVGivfr880FmQZ+datsQzKFQFcVOuCuDptiozlPzeA0/kVCULh9KEJy52rrr3j4l0PGcCaYh3WdCVQiPO1dOzDVvWgLCflas10WAzCE+qB+8dbrrJDZUszL4vtC9vPWioCdBl096JgXwokX/T6rT8TOY=

6. Finally, the Host will call RSAUtils.decrypt to decrypt the RSA encryption result with private key to get OTP. Then use the H(PW) saved in password.txt and the previously generated NA to calculate the OTP, which matches the decrypted result. If they are consistent, it will return success, otherwise, it will return fail. Finally return the verification result to the Client. It will display in Run window of Host :
> Start decrypt the OTP.
> Verify the decryption value.
> Verification succeeded/falied.

It will display in Run window of Client : 
> Host verification succeeded/failed.

7. The Client completes the service, exit the process :
> Service finished.
The Host continues to wait for the next Client connection :
> The client from /127.0.0.1:54178 leave.
> 

---------- Code references ---------- 
https://its201.com/article/xietansheng/88082266
https://www.cnblogs.com/chenzhenhong/p/13825286.html#l4

---------- Finished ----------